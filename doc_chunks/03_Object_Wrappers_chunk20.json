{
  "content": "Wrappers often use a chain of responsibility pattern to delegate operations:\n\n```groovy\n// Base class delegates to specific implementations\npublic abstract class AbstractWrapper implements ObjectWrapper {\n  @Override\n  public ObjectWrapper get(String key) {\n    Object value = getPropertyValue(key);\n    return WrapperFactory.wrap(value);\n  }\n  \n  // Subclasses implement this method\n  protected abstract Object getPropertyValue(String key);\n}\n```\n\n### 2. Null Object Pattern\n\nThe Empty wrapper is an implementation of the Null Object pattern:",
  "metadata": {
    "source": "docs/md/03_Object_Wrappers.md",
    "relative_path": "docs/md/03_Object_Wrappers.md",
    "filename": "03_Object_Wrappers.md",
    "filetype": "md",
    "chunk_index": 19,
    "total_chunks": 24
  }
}