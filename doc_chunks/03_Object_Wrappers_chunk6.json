{
  "content": "### 3. MapWrapper / MapEntryWrapper\n\nWraps Map objects and map entries for uniform access:\n\n```java\nclass MapWrapper implements ObjectWrapper {\n  private Map<String, Object> map;\n  \n  MapWrapper(Map<String, Object> map) {\n    this.map = map != null ? map : Collections.emptyMap();\n  }\n  \n  boolean isPresent() {\n    return map != null && !map.isEmpty();\n  }\n  \n  Object unwrap() {\n    return map;\n  }\n  \n  ObjectWrapper get(String key) {\n    if (map == null) return new Empty();\n    Object value = map.get(key);\n    return WrapperFactory.wrap(value);\n  }\n  \n  Set<String> getKeys() {\n    if (map == null) return Collections.emptySet();\n    return map.keySet();\n  }\n  \n  // Other implementation methods\n  // ...\n}\n```\n\n### 4. ListWrapper\n\nWraps List objects for uniform iteration and access:",
  "metadata": {
    "source": "docs/md/03_Object_Wrappers.md",
    "relative_path": "docs/md/03_Object_Wrappers.md",
    "filename": "03_Object_Wrappers.md",
    "filetype": "md",
    "chunk_index": 5,
    "total_chunks": 24
  }
}