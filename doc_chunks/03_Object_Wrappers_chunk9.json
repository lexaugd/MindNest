{
  "content": "Some wrapper implementations are used specifically for function evaluation:\n\n```java\nclass Constant implements ObjectWrapper {\n  private Object value;\n  \n  Constant(Object value) {\n    this.value = value;\n  }\n  \n  boolean isPresent() {\n    return value != null;\n  }\n  \n  Object unwrap() {\n    return value;\n  }\n  \n  // Type conversion methods\n  // ...\n}\n\nclass Empty implements ObjectWrapper {\n  boolean isPresent() {\n    return false;\n  }\n  \n  Object unwrap() {\n    return null;\n  }\n  \n  // Type conversion methods that return defaults\n  String asString() {\n    return \"\";\n  }\n  \n  Integer asInteger() {\n    return null;\n  }\n  \n  // ...\n}\n```\n\n## WrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:",
  "metadata": {
    "source": "docs/md/03_Object_Wrappers.md",
    "relative_path": "docs/md/03_Object_Wrappers.md",
    "filename": "03_Object_Wrappers.md",
    "filetype": "md",
    "chunk_index": 8,
    "total_chunks": 24
  }
}