{
  "content": "The WrapperFactory uses the Factory Method pattern to create appropriate wrappers:\n\n```groovy\npublic class WrapperFactory {\n  public static ObjectWrapper wrap(Object object) {\n    if (object == null) {\n      return new Empty();\n    } else if (object instanceof ObjectWrapper) {\n      return (ObjectWrapper) object;\n    } else if (object instanceof Infonode) {\n      return new InfonodeWrapper((Infonode) object);\n    }\n    // Other type checks...\n  }\n}\n```\n\n## Best Practices\n\n### 1. Use WrapperFactory\n\nAlways create wrappers using the WrapperFactory rather than direct instantiation to ensure the correct wrapper type is used.\n\n```groovy\n// Good\nObjectWrapper wrapper = WrapperFactory.wrap(someObject);\n\n// Avoid\nObjectWrapper wrapper = new MapWrapper((Map<String, Object>) someObject);  // Could throw ClassCastException\n```\n\n### 2. Handle Defaults Appropriately\n\nUse the overloaded conversion methods with defaults for critical values:",
  "metadata": {
    "source": "docs/md/03_Object_Wrappers.md",
    "relative_path": "docs/md/03_Object_Wrappers.md",
    "filename": "03_Object_Wrappers.md",
    "filetype": "md",
    "chunk_index": 21,
    "total_chunks": 24
  }
}