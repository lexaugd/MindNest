{
  "metadata": {
    "created": "2025-04-24T20:43:24.570814",
    "last_cleanup": "2025-04-24T21:36:35.431158"
  },
  "queries": {
    "docs:how listwrapper works:4": {
      "result": [
        {
          "content": "Set\n\n// Other implementation methods // ... } ```\n\n4. ListWrapper\n\nWraps List objects for uniform iteration and access:\n\n```java class ListWrapper implements ObjectWrapper { private List\n\nListWrapper(List<?> list) { if (list == null) { this.items = Collections.emptyList(); } else { this.items = list.stream() .map(WrapperFactory::wrap) .collect(Collectors.toList()); } }\n\nboolean isPresent() { return items != null && !items.isEmpty(); }\n\nObject unwrap() { return items.stream() .map(ObjectWrapper::unwrap) .collect(Collectors.toList()); }\n\nint size() { return items.size(); }\n\nObjectWrapper get(int index) { if (index < 0 || index >= items.size()) { return new Empty(); } return items.get(index); }\n\nvoid forEach(Consumer\n\n// Other implementation methods // ... } ```\n\n5. PropertyWrapper\n\nWraps Java Bean properties for uniform access:\n\n```java class PropertyWrapper implements ObjectWrapper { private Object bean; private PropertyDescriptor descriptor;",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Integer asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:\n\njava public class WrapperFactory { public static ObjectWrapper wrap(Object object) { if (object == null) { return new Empty(); } else if (object instanceof Infonode) { return new InfonodeWrapper((Infonode) object); } else if (object instanceof Map) { return new MapWrapper((Map<String, Object>) object); } else if (object instanceof List) { return new ListWrapper((List<?>) object); } else if (object instanceof String || object instanceof Number || object instanceof Boolean) { return new Constant(object); } else { // For regular Java beans or other objects return new BeanWrapper(object); } } }\n\nSpecial Purpose Wrappers\n\n1. ExtensionWrapper (CD System)\n\nProvides access to CD system extensions:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Core Wrapper Types\n\n1. ObjectWrapper\n\nThe base wrapper that provides common functionality for all wrapped objects:\n\n```java public interface ObjectWrapper { // Presence check boolean isPresent();\n\n// Get underlying object Object unwrap();\n\n// Property access Set\n\n// Type conversion String asString(); Integer asInteger(); BigDecimal asDecimal(); Boolean asBoolean(); Date asDate(); ListWrapper asList(); MapWrapper asMap();\n\n// Default values String asString(String defaultValue); Integer asInteger(Integer defaultValue); // ... } ```\n\n2. InfonodeWrapper\n\nWraps objects from the CD (Customer Data) system:\n\n```java class InfonodeWrapper implements ObjectWrapper { private Infonode node;\n\nInfonodeWrapper(Infonode node) { this.node = node; }\n\nboolean isPresent() { return node != null; }\n\nObject unwrap() { return node; }",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Object Wrapper System\n\nOverview\n\nThe Object Wrapper System provides a consistent interface for accessing different types of objects throughout the application. It allows for a uniform approach to data access regardless of the underlying data structure, simplifying business logic and making code more maintainable.\n\nArchitecture Diagram\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Client Code \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ObjectWrapper \u2502 \u2502 \u2502 \u2502 Interface \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 WrapperFactory \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 MapWrapper \u2502 \u2502ListWrapper\u2502 \u2502Infonode \u2502 \u2502Property \u2502 \u2502 Other \u2502 \u2502 \u2502 \u2502 \u2502 \u2502Wrapper \u2502 \u2502Wrapper \u2502 \u2502 Wrappers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCore Wrapper Types\n\n1. ObjectWrapper",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        }
      ],
      "timestamp": 1745542230.686379,
      "last_accessed": 1745542230.686379
    },
    "docs:what is the object wrapper system?:4": {
      "result": [
        {
          "content": "Object Wrapper System\n\nOverview\n\nThe Object Wrapper System provides a consistent interface for accessing different types of objects throughout the application. It allows for a uniform approach to data access regardless of the underlying data structure, simplifying business logic and making code more maintainable.\n\nArchitecture Diagram\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Client Code \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ObjectWrapper \u2502 \u2502 \u2502 \u2502 Interface \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 WrapperFactory \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 MapWrapper \u2502 \u2502ListWrapper\u2502 \u2502Infonode \u2502 \u2502Property \u2502 \u2502 Other \u2502 \u2502 \u2502 \u2502 \u2502 \u2502Wrapper \u2502 \u2502Wrapper \u2502 \u2502 Wrappers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCore Wrapper Types\n\n1. ObjectWrapper",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Core Wrapper Types\n\n1. ObjectWrapper\n\nThe base wrapper that provides common functionality for all wrapped objects:\n\n```java public interface ObjectWrapper { // Presence check boolean isPresent();\n\n// Get underlying object Object unwrap();\n\n// Property access Set\n\n// Type conversion String asString(); Integer asInteger(); BigDecimal asDecimal(); Boolean asBoolean(); Date asDate(); ListWrapper asList(); MapWrapper asMap();\n\n// Default values String asString(String defaultValue); Integer asInteger(Integer defaultValue); // ... } ```\n\n2. InfonodeWrapper\n\nWraps objects from the CD (Customer Data) system:\n\n```java class InfonodeWrapper implements ObjectWrapper { private Infonode node;\n\nInfonodeWrapper(Infonode node) { this.node = node; }\n\nboolean isPresent() { return node != null; }\n\nObject unwrap() { return node; }",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Integer asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:\n\njava public class WrapperFactory { public static ObjectWrapper wrap(Object object) { if (object == null) { return new Empty(); } else if (object instanceof Infonode) { return new InfonodeWrapper((Infonode) object); } else if (object instanceof Map) { return new MapWrapper((Map<String, Object>) object); } else if (object instanceof List) { return new ListWrapper((List<?>) object); } else if (object instanceof String || object instanceof Number || object instanceof Boolean) { return new Constant(object); } else { // For regular Java beans or other objects return new BeanWrapper(object); } } }\n\nSpecial Purpose Wrappers\n\n1. ExtensionWrapper (CD System)\n\nProvides access to CD system extensions:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "4. Return Empty Collections Instead of Null\n\nWhen implementing wrappers, always return empty collections rather than null:\n\n```groovy // Good Set\n\n// Avoid Set\n\nBenefits\n\nUnified Interface: Provides a consistent way to access different types of objects.\n\nNull Safety: Eliminates many null checks through the isPresent() pattern.\n\nType Conversion: Handles type conversion between different data representations.\n\nImmutability: Wrappers are typically immutable, making them thread-safe.\n\nSeparation of Concerns: Decouples business logic from the details of data access.\n\nError Resilience: Gracefully handles missing properties and type conversion errors.\n\nRelated Documentation\n\nFor more information about how Object Wrappers integrate with other components:\n\nCore Architecture\n\nResourceDriver Pattern\n\nCD System Integration\n\nValue System",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        }
      ],
      "timestamp": 1745542399.866893,
      "last_accessed": 1745545018.795337
    },
    "docs:how does listwrapper work?:4": {
      "result": [
        {
          "content": "Set\n\n// Other implementation methods // ... } ```\n\n4. ListWrapper\n\nWraps List objects for uniform iteration and access:\n\n```java class ListWrapper implements ObjectWrapper { private List\n\nListWrapper(List<?> list) { if (list == null) { this.items = Collections.emptyList(); } else { this.items = list.stream() .map(WrapperFactory::wrap) .collect(Collectors.toList()); } }\n\nboolean isPresent() { return items != null && !items.isEmpty(); }\n\nObject unwrap() { return items.stream() .map(ObjectWrapper::unwrap) .collect(Collectors.toList()); }\n\nint size() { return items.size(); }\n\nObjectWrapper get(int index) { if (index < 0 || index >= items.size()) { return new Empty(); } return items.get(index); }\n\nvoid forEach(Consumer\n\n// Other implementation methods // ... } ```\n\n5. PropertyWrapper\n\nWraps Java Bean properties for uniform access:\n\n```java class PropertyWrapper implements ObjectWrapper { private Object bean; private PropertyDescriptor descriptor;",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Integer asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:\n\njava public class WrapperFactory { public static ObjectWrapper wrap(Object object) { if (object == null) { return new Empty(); } else if (object instanceof Infonode) { return new InfonodeWrapper((Infonode) object); } else if (object instanceof Map) { return new MapWrapper((Map<String, Object>) object); } else if (object instanceof List) { return new ListWrapper((List<?>) object); } else if (object instanceof String || object instanceof Number || object instanceof Boolean) { return new Constant(object); } else { // For regular Java beans or other objects return new BeanWrapper(object); } } }\n\nSpecial Purpose Wrappers\n\n1. ExtensionWrapper (CD System)\n\nProvides access to CD system extensions:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Core Wrapper Types\n\n1. ObjectWrapper\n\nThe base wrapper that provides common functionality for all wrapped objects:\n\n```java public interface ObjectWrapper { // Presence check boolean isPresent();\n\n// Get underlying object Object unwrap();\n\n// Property access Set\n\n// Type conversion String asString(); Integer asInteger(); BigDecimal asDecimal(); Boolean asBoolean(); Date asDate(); ListWrapper asList(); MapWrapper asMap();\n\n// Default values String asString(String defaultValue); Integer asInteger(Integer defaultValue); // ... } ```\n\n2. InfonodeWrapper\n\nWraps objects from the CD (Customer Data) system:\n\n```java class InfonodeWrapper implements ObjectWrapper { private Infonode node;\n\nInfonodeWrapper(Infonode node) { this.node = node; }\n\nboolean isPresent() { return node != null; }\n\nObject unwrap() { return node; }",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Object Wrapper System\n\nOverview\n\nThe Object Wrapper System provides a consistent interface for accessing different types of objects throughout the application. It allows for a uniform approach to data access regardless of the underlying data structure, simplifying business logic and making code more maintainable.\n\nArchitecture Diagram\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Client Code \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ObjectWrapper \u2502 \u2502 \u2502 \u2502 Interface \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 WrapperFactory \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 MapWrapper \u2502 \u2502ListWrapper\u2502 \u2502Infonode \u2502 \u2502Property \u2502 \u2502 Other \u2502 \u2502 \u2502 \u2502 \u2502 \u2502Wrapper \u2502 \u2502Wrapper \u2502 \u2502 Wrappers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCore Wrapper Types\n\n1. ObjectWrapper",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        }
      ],
      "timestamp": 1745542541.021282,
      "last_accessed": 1745542541.021282
    },
    "docs:how does listwrapper woek:4": {
      "result": [
        {
          "content": "Set\n\n// Other implementation methods // ... } ```\n\n4. ListWrapper\n\nWraps List objects for uniform iteration and access:\n\n```java class ListWrapper implements ObjectWrapper { private List\n\nListWrapper(List<?> list) { if (list == null) { this.items = Collections.emptyList(); } else { this.items = list.stream() .map(WrapperFactory::wrap) .collect(Collectors.toList()); } }\n\nboolean isPresent() { return items != null && !items.isEmpty(); }\n\nObject unwrap() { return items.stream() .map(ObjectWrapper::unwrap) .collect(Collectors.toList()); }\n\nint size() { return items.size(); }\n\nObjectWrapper get(int index) { if (index < 0 || index >= items.size()) { return new Empty(); } return items.get(index); }\n\nvoid forEach(Consumer\n\n// Other implementation methods // ... } ```\n\n5. PropertyWrapper\n\nWraps Java Bean properties for uniform access:\n\n```java class PropertyWrapper implements ObjectWrapper { private Object bean; private PropertyDescriptor descriptor;",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Integer asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:\n\njava public class WrapperFactory { public static ObjectWrapper wrap(Object object) { if (object == null) { return new Empty(); } else if (object instanceof Infonode) { return new InfonodeWrapper((Infonode) object); } else if (object instanceof Map) { return new MapWrapper((Map<String, Object>) object); } else if (object instanceof List) { return new ListWrapper((List<?>) object); } else if (object instanceof String || object instanceof Number || object instanceof Boolean) { return new Constant(object); } else { // For regular Java beans or other objects return new BeanWrapper(object); } } }\n\nSpecial Purpose Wrappers\n\n1. ExtensionWrapper (CD System)\n\nProvides access to CD system extensions:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Core Wrapper Types\n\n1. ObjectWrapper\n\nThe base wrapper that provides common functionality for all wrapped objects:\n\n```java public interface ObjectWrapper { // Presence check boolean isPresent();\n\n// Get underlying object Object unwrap();\n\n// Property access Set\n\n// Type conversion String asString(); Integer asInteger(); BigDecimal asDecimal(); Boolean asBoolean(); Date asDate(); ListWrapper asList(); MapWrapper asMap();\n\n// Default values String asString(String defaultValue); Integer asInteger(Integer defaultValue); // ... } ```\n\n2. InfonodeWrapper\n\nWraps objects from the CD (Customer Data) system:\n\n```java class InfonodeWrapper implements ObjectWrapper { private Infonode node;\n\nInfonodeWrapper(Infonode node) { this.node = node; }\n\nboolean isPresent() { return node != null; }\n\nObject unwrap() { return node; }",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Object Wrapper System\n\nOverview\n\nThe Object Wrapper System provides a consistent interface for accessing different types of objects throughout the application. It allows for a uniform approach to data access regardless of the underlying data structure, simplifying business logic and making code more maintainable.\n\nArchitecture Diagram\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Client Code \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ObjectWrapper \u2502 \u2502 \u2502 \u2502 Interface \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 WrapperFactory \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 MapWrapper \u2502 \u2502ListWrapper\u2502 \u2502Infonode \u2502 \u2502Property \u2502 \u2502 Other \u2502 \u2502 \u2502 \u2502 \u2502 \u2502Wrapper \u2502 \u2502Wrapper \u2502 \u2502 Wrappers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCore Wrapper Types\n\n1. ObjectWrapper",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        }
      ],
      "timestamp": 1745542597.844191,
      "last_accessed": 1745542597.844191
    },
    "object wrapper system:4": {
      "result": [
        {
          "content": "Object Wrapper System\n\nOverview\n\nThe Object Wrapper System provides a consistent interface for accessing different types of objects throughout the application. It allows for a uniform approach to data access regardless of the underlying data structure, simplifying business logic and making code more maintainable.\n\nArchitecture Diagram\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Client Code \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ObjectWrapper \u2502 \u2502 \u2502 \u2502 Interface \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 WrapperFactory \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 MapWrapper \u2502 \u2502ListWrapper\u2502 \u2502Infonode \u2502 \u2502Property \u2502 \u2502 Other \u2502 \u2502 \u2502 \u2502 \u2502 \u2502Wrapper \u2502 \u2502Wrapper \u2502 \u2502 Wrappers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCore Wrapper Types\n\n1. ObjectWrapper",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Core Wrapper Types\n\n1. ObjectWrapper\n\nThe base wrapper that provides common functionality for all wrapped objects:\n\n```java public interface ObjectWrapper { // Presence check boolean isPresent();\n\n// Get underlying object Object unwrap();\n\n// Property access Set\n\n// Type conversion String asString(); Integer asInteger(); BigDecimal asDecimal(); Boolean asBoolean(); Date asDate(); ListWrapper asList(); MapWrapper asMap();\n\n// Default values String asString(String defaultValue); Integer asInteger(Integer defaultValue); // ... } ```\n\n2. InfonodeWrapper\n\nWraps objects from the CD (Customer Data) system:\n\n```java class InfonodeWrapper implements ObjectWrapper { private Infonode node;\n\nInfonodeWrapper(Infonode node) { this.node = node; }\n\nboolean isPresent() { return node != null; }\n\nObject unwrap() { return node; }",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Integer asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:\n\njava public class WrapperFactory { public static ObjectWrapper wrap(Object object) { if (object == null) { return new Empty(); } else if (object instanceof Infonode) { return new InfonodeWrapper((Infonode) object); } else if (object instanceof Map) { return new MapWrapper((Map<String, Object>) object); } else if (object instanceof List) { return new ListWrapper((List<?>) object); } else if (object instanceof String || object instanceof Number || object instanceof Boolean) { return new Constant(object); } else { // For regular Java beans or other objects return new BeanWrapper(object); } } }\n\nSpecial Purpose Wrappers\n\n1. ExtensionWrapper (CD System)\n\nProvides access to CD system extensions:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Constant(Object value) { this.value = value; }\n\nboolean isPresent() { return value != null; }\n\nObject unwrap() { return value; }\n\n// Type conversion methods // ... }\n\nclass Empty implements ObjectWrapper { boolean isPresent() { return false; }\n\nObject unwrap() { return null; }\n\n// Type conversion methods that return defaults String asString() { return \"\"; }\n\nInteger asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        }
      ],
      "timestamp": 1745542808.515799,
      "last_accessed": 1745543574.0621161
    },
    "wrappper:4": {
      "result": [
        {
          "content": "Integer asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:\n\njava public class WrapperFactory { public static ObjectWrapper wrap(Object object) { if (object == null) { return new Empty(); } else if (object instanceof Infonode) { return new InfonodeWrapper((Infonode) object); } else if (object instanceof Map) { return new MapWrapper((Map<String, Object>) object); } else if (object instanceof List) { return new ListWrapper((List<?>) object); } else if (object instanceof String || object instanceof Number || object instanceof Boolean) { return new Constant(object); } else { // For regular Java beans or other objects return new BeanWrapper(object); } } }\n\nSpecial Purpose Wrappers\n\n1. ExtensionWrapper (CD System)\n\nProvides access to CD system extensions:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Core Wrapper Types\n\n1. ObjectWrapper\n\nThe base wrapper that provides common functionality for all wrapped objects:\n\n```java public interface ObjectWrapper { // Presence check boolean isPresent();\n\n// Get underlying object Object unwrap();\n\n// Property access Set\n\n// Type conversion String asString(); Integer asInteger(); BigDecimal asDecimal(); Boolean asBoolean(); Date asDate(); ListWrapper asList(); MapWrapper asMap();\n\n// Default values String asString(String defaultValue); Integer asInteger(Integer defaultValue); // ... } ```\n\n2. InfonodeWrapper\n\nWraps objects from the CD (Customer Data) system:\n\n```java class InfonodeWrapper implements ObjectWrapper { private Infonode node;\n\nInfonodeWrapper(Infonode node) { this.node = node; }\n\nboolean isPresent() { return node != null; }\n\nObject unwrap() { return node; }",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Constant(Object value) { this.value = value; }\n\nboolean isPresent() { return value != null; }\n\nObject unwrap() { return value; }\n\n// Type conversion methods // ... }\n\nclass Empty implements ObjectWrapper { boolean isPresent() { return false; }\n\nObject unwrap() { return null; }\n\n// Type conversion methods that return defaults String asString() { return \"\"; }\n\nInteger asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "// Other methods... } ```\n\n3. Factory Method Pattern\n\nThe WrapperFactory uses the Factory Method pattern to create appropriate wrappers:\n\ngroovy public class WrapperFactory { public static ObjectWrapper wrap(Object object) { if (object == null) { return new Empty(); } else if (object instanceof ObjectWrapper) { return (ObjectWrapper) object; } else if (object instanceof Infonode) { return new InfonodeWrapper((Infonode) object); } // Other type checks... } }\n\nBest Practices\n\n1. Use WrapperFactory\n\nAlways create wrappers using the WrapperFactory rather than direct instantiation to ensure the correct wrapper type is used.\n\n```groovy // Good ObjectWrapper wrapper = WrapperFactory.wrap(someObject);\n\n// Avoid ObjectWrapper wrapper = new MapWrapper((Map\n\n2. Handle Defaults Appropriately\n\nUse the overloaded conversion methods with defaults for critical values:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        }
      ],
      "timestamp": 1745542905.871068,
      "last_accessed": 1745542905.871068
    },
    "docs:what is a listwrapper?:4": {
      "result": [
        {
          "content": "Set\n\n// Other implementation methods // ... } ```\n\n4. ListWrapper\n\nWraps List objects for uniform iteration and access:\n\n```java class ListWrapper implements ObjectWrapper { private List\n\nListWrapper(List<?> list) { if (list == null) { this.items = Collections.emptyList(); } else { this.items = list.stream() .map(WrapperFactory::wrap) .collect(Collectors.toList()); } }\n\nboolean isPresent() { return items != null && !items.isEmpty(); }\n\nObject unwrap() { return items.stream() .map(ObjectWrapper::unwrap) .collect(Collectors.toList()); }\n\nint size() { return items.size(); }\n\nObjectWrapper get(int index) { if (index < 0 || index >= items.size()) { return new Empty(); } return items.get(index); }\n\nvoid forEach(Consumer\n\n// Other implementation methods // ... } ```\n\n5. PropertyWrapper\n\nWraps Java Bean properties for uniform access:\n\n```java class PropertyWrapper implements ObjectWrapper { private Object bean; private PropertyDescriptor descriptor;",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Integer asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:\n\njava public class WrapperFactory { public static ObjectWrapper wrap(Object object) { if (object == null) { return new Empty(); } else if (object instanceof Infonode) { return new InfonodeWrapper((Infonode) object); } else if (object instanceof Map) { return new MapWrapper((Map<String, Object>) object); } else if (object instanceof List) { return new ListWrapper((List<?>) object); } else if (object instanceof String || object instanceof Number || object instanceof Boolean) { return new Constant(object); } else { // For regular Java beans or other objects return new BeanWrapper(object); } } }\n\nSpecial Purpose Wrappers\n\n1. ExtensionWrapper (CD System)\n\nProvides access to CD system extensions:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Object Wrapper System\n\nOverview\n\nThe Object Wrapper System provides a consistent interface for accessing different types of objects throughout the application. It allows for a uniform approach to data access regardless of the underlying data structure, simplifying business logic and making code more maintainable.\n\nArchitecture Diagram\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Client Code \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ObjectWrapper \u2502 \u2502 \u2502 \u2502 Interface \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 WrapperFactory \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 MapWrapper \u2502 \u2502ListWrapper\u2502 \u2502Infonode \u2502 \u2502Property \u2502 \u2502 Other \u2502 \u2502 \u2502 \u2502 \u2502 \u2502Wrapper \u2502 \u2502Wrapper \u2502 \u2502 Wrappers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCore Wrapper Types\n\n1. ObjectWrapper",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Core Wrapper Types\n\n1. ObjectWrapper\n\nThe base wrapper that provides common functionality for all wrapped objects:\n\n```java public interface ObjectWrapper { // Presence check boolean isPresent();\n\n// Get underlying object Object unwrap();\n\n// Property access Set\n\n// Type conversion String asString(); Integer asInteger(); BigDecimal asDecimal(); Boolean asBoolean(); Date asDate(); ListWrapper asList(); MapWrapper asMap();\n\n// Default values String asString(String defaultValue); Integer asInteger(Integer defaultValue); // ... } ```\n\n2. InfonodeWrapper\n\nWraps objects from the CD (Customer Data) system:\n\n```java class InfonodeWrapper implements ObjectWrapper { private Infonode node;\n\nInfonodeWrapper(Infonode node) { this.node = node; }\n\nboolean isPresent() { return node != null; }\n\nObject unwrap() { return node; }",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        }
      ],
      "timestamp": 1745543401.189139,
      "last_accessed": 1745543401.189139
    },
    "docs:wht classe sdo we have:4": {
      "result": [
        {
          "content": "// Other implementation methods // ... } ```\n\n2. KeyWrapper (CD System)\n\nWraps CD system keys:\n\n```java class KeyWrapper implements ObjectWrapper { private Infokey key;\n\nKeyWrapper(Infokey key) { this.key = key; }\n\nboolean isPresent() { return key != null; }\n\nObject unwrap() { return key; }\n\nString getKeyType() { if (!isPresent()) return \"\"; return key.getClass().getSimpleName(); }\n\n// Other implementation methods // ... } ```\n\nIntegration with ResourceDrivers\n\nObject wrappers are frequently used with resources provided by ResourceDrivers, creating a seamless interface between the resource management and data access layers.\n\nExample with Database Resources\n\n```groovy void processOrder(ServiceContext context, ProcessLog log, Action action, Result result) { // Get the database resource via ResourceDriver DatabaseResourceDriver dbDriver = context.get(\"databaseDriver\"); DatabaseResource db = dbDriver.prepare(context, log, action, result);\n\ntry { // Retrieve order data and wrap it Map",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Object Wrapper System\n\nOverview\n\nThe Object Wrapper System provides a consistent interface for accessing different types of objects throughout the application. It allows for a uniform approach to data access regardless of the underlying data structure, simplifying business logic and making code more maintainable.\n\nArchitecture Diagram\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Client Code \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ObjectWrapper \u2502 \u2502 \u2502 \u2502 Interface \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 WrapperFactory \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 MapWrapper \u2502 \u2502ListWrapper\u2502 \u2502Infonode \u2502 \u2502Property \u2502 \u2502 Other \u2502 \u2502 \u2502 \u2502 \u2502 \u2502Wrapper \u2502 \u2502Wrapper \u2502 \u2502 Wrappers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCore Wrapper Types\n\n1. ObjectWrapper",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Core Wrapper Types\n\n1. ObjectWrapper\n\nThe base wrapper that provides common functionality for all wrapped objects:\n\n```java public interface ObjectWrapper { // Presence check boolean isPresent();\n\n// Get underlying object Object unwrap();\n\n// Property access Set\n\n// Type conversion String asString(); Integer asInteger(); BigDecimal asDecimal(); Boolean asBoolean(); Date asDate(); ListWrapper asList(); MapWrapper asMap();\n\n// Default values String asString(String defaultValue); Integer asInteger(Integer defaultValue); // ... } ```\n\n2. InfonodeWrapper\n\nWraps objects from the CD (Customer Data) system:\n\n```java class InfonodeWrapper implements ObjectWrapper { private Infonode node;\n\nInfonodeWrapper(Infonode node) { this.node = node; }\n\nboolean isPresent() { return node != null; }\n\nObject unwrap() { return node; }",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "try { // Find shipment in CD system Cd1ShipmentInput shipmentInput = cd1.findShipment([trackingNo: \"1Z9999999\"]);\n\n// Wrap the shipment for easy access\nObjectWrapper shipment = WrapperFactory.wrap(shipmentInput.getShipment());\n\n// Access shipment properties\nString status = shipment.get(\"status\").asString();\nDate deliveryDate = shipment.get(\"deliveryDate\").asDate();\n\n// Process shipment packages\nObjectWrapper packages = shipment.get(\"packages\").asList();\npackages.forEach(pkg -> {\n  String packageId = pkg.get(\"id\").asString();\n  BigDecimal weight = pkg.get(\"weight\").asDecimal();\n\n  // Business logic...\n});\n\n// Successful completion\ncd1Driver.finished(context, log, action, result, cd1);\n\n} finally { // Cleanup cd1Driver.cleanup(context, log, action, cd1); } } ```\n\nUsage Patterns\n\n1. Unified Property Access",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        }
      ],
      "timestamp": 1745543977.562827,
      "last_accessed": 1745543977.562827
    },
    "docs:hi:4": {
      "result": [
        {
          "content": "try { // Find shipment in CD system Cd1ShipmentInput shipmentInput = cd1.findShipment([trackingNo: \"1Z9999999\"]);\n\n// Wrap the shipment for easy access\nObjectWrapper shipment = WrapperFactory.wrap(shipmentInput.getShipment());\n\n// Access shipment properties\nString status = shipment.get(\"status\").asString();\nDate deliveryDate = shipment.get(\"deliveryDate\").asDate();\n\n// Process shipment packages\nObjectWrapper packages = shipment.get(\"packages\").asList();\npackages.forEach(pkg -> {\n  String packageId = pkg.get(\"id\").asString();\n  BigDecimal weight = pkg.get(\"weight\").asDecimal();\n\n  // Business logic...\n});\n\n// Successful completion\ncd1Driver.finished(context, log, action, result, cd1);\n\n} finally { // Cleanup cd1Driver.cleanup(context, log, action, cd1); } } ```\n\nUsage Patterns\n\n1. Unified Property Access",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Test Documentation\n\nThis is a test documentation file to verify that our AI assistant can read and understand text files.\n\nKey Features:\n1. Simple text format\n2. Easy to read\n3. Contains basic documentation structure\n\nExample Usage:\nThe system should be able to answer questions about:\n- Java code in the java folder\n- Groovy code in the groovy folder\n- Documentation in the txt folder\n\nThis is just a test file to verify that everything is working correctly.",
          "metadata": {
            "source": "docs/txt/test_documentation.txt"
          }
        },
        {
          "content": "class TestGroovy {\n    // This is a test Groovy class\n    String name\n    \n    TestGroovy(String name) {\n        this.name = name\n    }\n    \n    String getName() {\n        return name\n    }\n    \n    void setName(String name) {\n        this.name = name\n    }\n    \n    String toString() {\n        return \"TestGroovy[name='${name}']\"\n    }\n}",
          "metadata": {
            "source": "docs/groovy/TestGroovy.groovy"
          }
        },
        {
          "content": "public class TestClass {\n    // This is a test Java class\n    private String name;\n    \n    public TestClass(String name) {\n        this.name = name;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String toString() {\n        return \"TestClass{name='\" + name + \"'}\";\n    }\n}",
          "metadata": {
            "source": "docs/java/TestClass.java"
          }
        }
      ],
      "timestamp": 1745544204.099427,
      "last_accessed": 1745544204.099427
    },
    "listwrapper:4": {
      "result": [
        {
          "content": "Set\n\n// Other implementation methods // ... } ```\n\n4. ListWrapper\n\nWraps List objects for uniform iteration and access:\n\n```java class ListWrapper implements ObjectWrapper { private List\n\nListWrapper(List<?> list) { if (list == null) { this.items = Collections.emptyList(); } else { this.items = list.stream() .map(WrapperFactory::wrap) .collect(Collectors.toList()); } }\n\nboolean isPresent() { return items != null && !items.isEmpty(); }\n\nObject unwrap() { return items.stream() .map(ObjectWrapper::unwrap) .collect(Collectors.toList()); }\n\nint size() { return items.size(); }\n\nObjectWrapper get(int index) { if (index < 0 || index >= items.size()) { return new Empty(); } return items.get(index); }\n\nvoid forEach(Consumer\n\n// Other implementation methods // ... } ```\n\n5. PropertyWrapper\n\nWraps Java Bean properties for uniform access:\n\n```java class PropertyWrapper implements ObjectWrapper { private Object bean; private PropertyDescriptor descriptor;",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Integer asInteger() { return null; }\n\n// ... } ```\n\nWrapperFactory\n\nThe WrapperFactory is responsible for creating the appropriate wrapper based on the type of object:\n\njava public class WrapperFactory { public static ObjectWrapper wrap(Object object) { if (object == null) { return new Empty(); } else if (object instanceof Infonode) { return new InfonodeWrapper((Infonode) object); } else if (object instanceof Map) { return new MapWrapper((Map<String, Object>) object); } else if (object instanceof List) { return new ListWrapper((List<?>) object); } else if (object instanceof String || object instanceof Number || object instanceof Boolean) { return new Constant(object); } else { // For regular Java beans or other objects return new BeanWrapper(object); } } }\n\nSpecial Purpose Wrappers\n\n1. ExtensionWrapper (CD System)\n\nProvides access to CD system extensions:",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Object Wrapper System\n\nOverview\n\nThe Object Wrapper System provides a consistent interface for accessing different types of objects throughout the application. It allows for a uniform approach to data access regardless of the underlying data structure, simplifying business logic and making code more maintainable.\n\nArchitecture Diagram\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Client Code \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ObjectWrapper \u2502 \u2502 \u2502 \u2502 Interface \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 WrapperFactory \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u25bc \u25bc \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 MapWrapper \u2502 \u2502ListWrapper\u2502 \u2502Infonode \u2502 \u2502Property \u2502 \u2502 Other \u2502 \u2502 \u2502 \u2502 \u2502 \u2502Wrapper \u2502 \u2502Wrapper \u2502 \u2502 Wrappers \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCore Wrapper Types\n\n1. ObjectWrapper",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        },
        {
          "content": "Core Wrapper Types\n\n1. ObjectWrapper\n\nThe base wrapper that provides common functionality for all wrapped objects:\n\n```java public interface ObjectWrapper { // Presence check boolean isPresent();\n\n// Get underlying object Object unwrap();\n\n// Property access Set\n\n// Type conversion String asString(); Integer asInteger(); BigDecimal asDecimal(); Boolean asBoolean(); Date asDate(); ListWrapper asList(); MapWrapper asMap();\n\n// Default values String asString(String defaultValue); Integer asInteger(Integer defaultValue); // ... } ```\n\n2. InfonodeWrapper\n\nWraps objects from the CD (Customer Data) system:\n\n```java class InfonodeWrapper implements ObjectWrapper { private Infonode node;\n\nInfonodeWrapper(Infonode node) { this.node = node; }\n\nboolean isPresent() { return node != null; }\n\nObject unwrap() { return node; }",
          "metadata": {
            "source": "docs/md/03_Object_Wrappers.md"
          }
        }
      ],
      "timestamp": 1745545069.483756,
      "last_accessed": 1745545069.483756
    }
  }
}